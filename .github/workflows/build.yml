name: Сборка Fooyin AppImage (автоматически)

on:
  schedule:
    - cron: '0 0 * * 0' # Каждое воскресенье в 00:00 UTC
  push:
    branches:
      - main
    tags:
      - 'v*' # Также собирать при новом теге (например, v1.2.3)

permissions:
  contents: write   # нужно для создания релизов

jobs:
  build-appimage:
    runs-on: ubuntu-24.04
    steps:
      - name: Клонировать репозиторий
        uses: actions/checkout@v4

      - name: Установить зависимости
        run: |
          
          sudo apt-get update
          sudo apt-get install -y wget curl jq binutils tar file libfuse2 \
            libglib2.0-0 libnss3 libnspr4 libatk1.0-0 \
            libatk-bridge2.0-0 libcups2 libdrm2 libdbus-1-3 \
            libexpat1 libfontconfig1 libgbm1 libgl1 \
            libgtk-3-0 libpango-1.0-0 libx11-6 libxcb1 \
            libxcomposite1 libxdamage1 libxext6 libxfixes3 \
            libxrandr2 libxrender1 libasound2t64 libatspi2.0-0 \
            libqt6core6 libqt6gui6 libqt6widgets6 libqt6qml6 libqt6quick6 \
            libqt6multimedia6 libqt6opengl6 libstdc++6

      - name: Скачать последний .deb пакет Fooyin
        id: download-deb
        run: |
          echo "🔍 Поиск последнего релиза Fooyin..."
          LATEST_TAG=$(curl -s "https://api.github.com/repos/fooyin/fooyin/releases/latest" | jq -r '.tag_name')
          DEB_URL="https://github.com/fooyin/fooyin/releases/download/${LATEST_TAG}/fooyin_${LATEST_TAG#v}-plucky_amd64.deb"
          echo "📥 Скачивание: $DEB_URL"
          wget -O fooyin_latest.deb "$DEB_URL"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "DEB_URL=$DEB_URL" >> $GITHUB_ENV
          echo "✅ Успешно скачано: $LATEST_TAG"

      - name: 📦 Распаковка .deb файла
        run: |
          echo "📦 Распаковка .deb файла..."
          # Находим скачанный .deb
          DEB_FILE=$(ls *.deb | head -n 1)
          echo "Найден пакет: $DEB_FILE"

          # Распаковываем содержимое deb (ar-архив)
          ar x "$DEB_FILE"

          mkdir -p fooyin-appdir

          # Определяем, какой именно архив с данными внутри (.xz, .zst, .gz, ...)
          DATA_TAR=$(ls data.tar.* | head -n 1)
          echo "Распаковываем архив: $DATA_TAR"

          tar -xf "$DATA_TAR" -C fooyin-appdir/

          # Убираем мусор
          rm -f "$DEB_FILE" control.tar.* debian-binary "$DATA_TAR"


      - name: Скачать AppImageTool
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Создать структуру AppDir
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/lib
          mkdir -p AppDir/usr/share
          mkdir -p AppDir/usr/lib/x86_64-linux-gnu

      - name: Скопировать файлы из .deb в AppDir
        run: |
          cp -r fooyin-appdir/usr/* AppDir/usr/

      # -----------------------
      # Скачиваем и распаковываем готовую сборку ICU 76.1 для Ubuntu 22.04
      - name: Download and Extract ICU 76.1 (Ubuntu 22.04)
        run: |
          echo "=== Скачивание ICU 76.1 (Ubuntu 22.04) ==="
          wget https://github.com/unicode-org/icu/releases/download/release-76-1/icu4c-76_1-Ubuntu22.04-x64.tgz
          echo "=== Распаковка ICU 76.1 ==="
          tar xzf icu4c-76_1-Ubuntu22.04-x64.tgz
          echo "=== Копирование библиотек ICU 76.1 в AppDir ==="
          mkdir -p AppDir/usr/lib
          # Предполагаем, что библиотеки находятся в подкаталоге lib после распаковки
          echo
          ls -la
          echo
          ls -la ./icu/usr/local/lib/
          echo
          cp ./icu/usr/local/lib/*.* AppDir/usr/lib/
          # Копируем также символьные ссылки .so и основные библиотеки, если они есть в архиве
          # cp icu4c-76_1-Ubuntu22.04-x64/lib/libicui18n.so AppDir/usr/lib/ 2>/dev/null || echo "libicui18n.so (symlink) not found"
          # cp icu4c-76_1-Ubuntu22.04-x64/lib/libicuuc.so AppDir/usr/lib/ 2>/dev/null || echo "libicuuc.so (symlink) not found"
          # cp icu4c-76_1-Ubuntu22.04-x64/lib/libicudata.so AppDir/usr/lib/ 2>/dev/null || echo "libicudata.so (symlink) not found"
    
          echo "Файлы ICU 76 в AppDir/usr/lib/ после копирования:"
          ls -la AppDir/usr/lib/libicu* 2>/dev/null || echo "Файлы libicu* не найдены в AppDir/usr/lib/"
    
          # Удаляем временные файлы
          rm -rf icu4c-76_1-Ubuntu22.04-x64*
      # -----------------------

      # -----------------------
      # 1. Получить последний тег FFmpeg версии 7.x.x
      - name: Get Latest FFmpeg 7.x Tag
        id: ffmpeg-tag
        run: |
          # Клонируем репозиторий FFmpeg в временную директорию
          cd /tmp
          git clone --bare --filter=blob:none --quiet https://git.ffmpeg.org/ffmpeg.git ffmpeg_temp
          cd ffmpeg_temp
          
          # Получаем все теги
          # Фильтруем теги, начинающиеся с 'n7.' (например, n7.0, n7.1)
          # Сортируем по версии и берем последний
          LATEST_TAG=$(git tag -l "n7.*" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "::error::Не удалось найти тег FFmpeg версии 7.x.x"
            exit 1
          fi
          
          # Получаем хэш коммита для этого тега
          TAG_HASH=$(git rev-parse "$LATEST_TAG")
          
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "hash=$TAG_HASH" >> $GITHUB_OUTPUT
          echo "Найден последний тег FFmpeg 7.x.x: $LATEST_TAG ($TAG_HASH)"

      # -----------------------
      # 2. Кешируем сборку FFmpeg из Git
      - name: Cache FFmpeg Git Build
        id: cache-ffmpeg
        uses: actions/cache@v3
        with:
          path: ~/ffmpeg_build
          # Кэш будет промахиваться, если хэш коммита изменится
          key: ffmpeg-git-${{ steps.ffmpeg-tag.outputs.hash }}-${{ runner.os }}

      # -----------------------
      # 3. Сборка FFmpeg из Git, если кеш пустой
      - name: Build FFmpeg from Git
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake build-essential cmake git libtool \
          pkg-config texinfo yasm nasm zlib1g-dev libx264-dev libx265-dev \
          libvpx-dev libfdk-aac-dev libmp3lame-dev libopus-dev wget

          mkdir -p ~/ffmpeg_build_source && cd ~/ffmpeg_build_source
          git clone https://git.ffmpeg.org/ffmpeg.git
          cd ffmpeg
          
          # Переходим к найденному тегу
          git checkout tags/${{ steps.ffmpeg-tag.outputs.tag }} -b build-branch
          
          # Конфигурация для сборки shared libraries (.so.x)
          # Отключаем статические библиотеки и программы, которые не нужны
          # Отключаем yasm/asm, если возникают ошибки (по аналогии с предыдущими попытками)
          ./configure --prefix=$HOME/ffmpeg_build --disable-programs --disable-doc --enable-shared --disable-static --disable-yasm --disable-asm
          make -j$(nproc)
          make install

      # -----------------------
      # 4. Копируем библиотеки в AppDir и проверяем
      - name: Copy FFmpeg libs to AppDir and verify
        run: |
          echo "=== Копирование библиотек FFmpeg из Git-сборки ==="
          echo "Ищем файлы в $HOME/ffmpeg_build/lib/:"
          ls -la $HOME/ffmpeg_build/lib/libavcodec.so* $HOME/ffmpeg_build/lib/libavformat.so* 2>/dev/null || echo "Файлы .so* не найдены в сборке"
          
          mkdir -p AppDir/usr/lib
          cp $HOME/ffmpeg_build/lib/libavcodec.so* AppDir/usr/lib/
          cp $HOME/ffmpeg_build/lib/libavformat.so* AppDir/usr/lib/
          cp $HOME/ffmpeg_build/lib/*.so* AppDir/usr/lib/
          # cp -r $HOME/ffmpeg_build/include AppDir/usr/ # Обычно не нужно для AppImage
          
          echo "Файлы в AppDir/usr/lib/ после копирования:"
          ls -la AppDir/usr/lib/libavcodec.so* AppDir/usr/lib/libavformat.so* 2>/dev/null || echo "Файлы .so* отсутствуют в AppDir"

      # -----------------------
      # 5. Устанавливаем LD_LIBRARY_PATH в AppRun
      - name: Set library path
        run: |
          echo 'export LD_LIBRARY_PATH=$APPDIR/usr/lib:$LD_LIBRARY_PATH' >> AppDir/AppRun

      - name: Скопировать все зависимости библиотек
        run: |
          copy_deps() {
            local binary="$1"
            if [ ! -f "$binary" ]; then
              echo "❌ Файл не найден: $binary"
              exit 1
            fi
            echo "🔍 Поиск зависимостей для: $binary"
            ldd "$binary" | awk '/=>/ { print $3 }' | while read lib; do
              if [ -n "$lib" ] && [ -f "$lib" ]; then
                mkdir -p "AppDir$(dirname "$lib")"
                cp "$lib" "AppDir$lib"
                echo "   ✅ Скопировано: $lib"
              fi
            done
          }
          copy_deps "AppDir/usr/bin/fooyin"

      - name: Создать скрипт AppRun
        run: |
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export LD_LIBRARY_PATH="${HERE}/usr/lib/x86_64-linux-gnu:${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          export QT_PLUGIN_PATH="${HERE}/usr/lib/x86_64-linux-gnu/qt6/plugins"
          export QML2_IMPORT_PATH="${HERE}/usr/lib/x86_64-linux-gnu/qt6/qml"
          export PATH="${HERE}/usr/bin:${PATH}"
          exec "${HERE}/usr/bin/fooyin" "$@"
          EOF
          chmod +x AppDir/AppRun

      - name: Создать .desktop файл
        run: |
          cat > AppDir/fooyin.desktop << 'EOF'
          [Desktop Entry]
          Name=Fooyin
          Comment=Современный проигрыватель музыки с фокусом на высококачественное воспроизведение аудио
          Exec=fooyin
          Icon=fooyin
          Terminal=false
          Type=Application
          Categories=AudioVideo;Audio;
          MimeType=audio/mpeg;audio/x-flac;audio/wav;audio/x-wav;audio/ogg;audio/x-ogg;audio/aac;audio/x-m4a;audio/flac;audio/mp4;
          EOF

      - name: Скопировать иконку
        run: |
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          ICON_FILE=$(find AppDir/usr/share/icons -name "*fooyin*" -o -name "*Fooyin*" -type f | head -1)
          if [ -n "$ICON_FILE" ]; then
            cp "$ICON_FILE" AppDir/usr/share/icons/hicolor/256x256/apps/fooyin.png
            cp "$ICON_FILE" AppDir/fooyin.png
            echo "✅ Иконка скопирована: $ICON_FILE"
          else
            echo "⚠️ Иконка не найдена в пакете. Попытка загрузить fallback..."
            wget -O AppDir/fooyin.png https://raw.githubusercontent.com/fooyin/fooyin/master/resources/fooyin-icon.png 2>/dev/null && echo "✅ Fallback иконка загружена" || echo "❌ Не удалось загрузить иконку"
          fi

      - name: Собрать AppImage
        run: |
          ./appimagetool-x86_64.AppImage AppDir Fooyin-${{ env.LATEST_TAG }}-x86_64.AppImage

      - name: Загрузить AppImage как артефакт
        uses: actions/upload-artifact@v4
        with:
          name: Fooyin-AppImage
          path: Fooyin-*.AppImage

      - name: Получить текущую дату
        id: get-date
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Создать GitHub Release (только при тегах)
        #if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: Fooyin-*.AppImage
          tag_name: ${{ env.LATEST_TAG }}
          name: Fooyin ${{ env.LATEST_TAG }}
          body: |
            Fooyin AppImage собран автоматически из последнего .deb пакета.

            **Версия:** ${{ env.LATEST_TAG }}
            **Дата сборки:** ${{ env.BUILD_DATE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
