name: –°–±–æ—Ä–∫–∞ Fooyin AppImage (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

on:
  schedule:
    - cron: '0 4 * * 0'  # –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 04:00 UTC
  push:
    branches:
      - main
    tags:
      - 'v*' # –¢–∞–∫–∂–µ —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–∏ –Ω–æ–≤–æ–º —Ç–µ–≥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, v1.2.3)

permissions:
  contents: write   # –Ω—É–∂–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤

jobs:
  build-appimage:
    runs-on: ubuntu-24.04
    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        uses: actions/checkout@v4

      - name: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq binutils tar file libfuse2 \
            libglib2.0-0 libnss3 libnspr4 libatk1.0-0 \
            libatk-bridge2.0-0 libcups2 libdrm2 libdbus-1-3 \
            libexpat1 libfontconfig1 libgbm1 libgl1 \
            libgtk-3-0 libpango-1.0-0 libx11-6 libxcb1 \
            libxcomposite1 libxdamage1 libxext6 libxfixes3 \
            libxrandr2 libxrender1 libasound2t64 libatspi2.0-0 \
            libstdc++6


      - name: –°–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π .deb –ø–∞–∫–µ—Ç Fooyin
        id: download-deb
        run: |
          echo "üîç –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞ Fooyin..."
          LATEST_TAG=$(curl -s "https://api.github.com/repos/fooyin/fooyin/releases/latest" | jq -r '.tag_name')
          DEB_URL="https://github.com/fooyin/fooyin/releases/download/${LATEST_TAG}/fooyin_${LATEST_TAG#v}-plucky_amd64.deb"
          echo "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: $DEB_URL"
          wget -O fooyin_latest.deb "$DEB_URL"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "DEB_URL=$DEB_URL" >> $GITHUB_ENV
          echo "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: $LATEST_TAG"

      - name: üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ .deb —Ñ–∞–π–ª–∞
        run: |
          echo "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ .deb —Ñ–∞–π–ª–∞..."
          # –ù–∞—Ö–æ–¥–∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–π .deb
          DEB_FILE=$(ls *.deb | head -n 1)
          echo "–ù–∞–π–¥–µ–Ω –ø–∞–∫–µ—Ç: $DEB_FILE"

          # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ deb (ar-–∞—Ä—Ö–∏–≤)
          ar x "$DEB_FILE"

          mkdir -p fooyin-appdir

          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∞—Ä—Ö–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ (.xz, .zst, .gz, ...)
          DATA_TAR=$(ls data.tar.* | head -n 1)
          echo "–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤: $DATA_TAR"

          tar -xf "$DATA_TAR" -C fooyin-appdir/

          # –£–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä
          rm -f "$DEB_FILE" control.tar.* debian-binary "$DATA_TAR"


      - name: –°–∫–∞—á–∞—Ç—å AppImageTool
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É AppDir
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/lib
          mkdir -p AppDir/usr/share
          mkdir -p AppDir/usr/lib/x86_64-linux-gnu

      - name: –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ .deb –≤ AppDir
        run: |
          cp -r fooyin-appdir/usr/* AppDir/usr/

          
      # -----------------------
      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt 6.8.0 —Å –ø–æ–º–æ—â—å—é aqtinstall —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      - name: Cache Qt 6.8.0
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: /opt/Qt
          key: qt-${{ runner.os }}-6.8.0-gcc_64-${{ hashFiles('**/build.yml') }}
          restore-keys: |
            qt-${{ runner.os }}-6.8.0-gcc_64-

      - name: Install Qt 6.8.0 with aqtinstall
        id: install-qt
        run: |
          echo "=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt 6.8.0 —Å –ø–æ–º–æ—â—å—é aqtinstall ==="

          # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é Qt –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è aqtinstall
          QT_VERSION="6.8.0"
          # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'gcc_64' –∫–∞–∫ –∏–º—è –∫–∞—Ç–∞–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–µ—Ç aqtinstall,
          # –∞ –Ω–µ 'linux_gcc_64', –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ list-qt
          QT_ARCH_DIR="gcc_64"
          # –ò–º—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã aqt install-qt
          QT_ARCH_INSTALL="linux_gcc_64"
          
          QT_MODULES="qtmultimedia qt5compat qtshadertools"

          # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
          QT_INSTALL_PATH="/opt/Qt/$QT_VERSION/$QT_ARCH_DIR"
          
          if [ -d "$QT_INSTALL_PATH" ] && [ -f "$QT_INSTALL_PATH/bin/qmake6" ]; then
            echo "Qt $QT_VERSION ($QT_ARCH_DIR) –Ω–∞–π–¥–µ–Ω –≤ $QT_INSTALL_PATH (–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏). –ü—Ä–æ–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ aqtinstall."
            echo "cache-hit-local=true" >> $GITHUB_OUTPUT
          else
            echo "Qt $QT_VERSION ($QT_ARCH_DIR) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $QT_INSTALL_PATH. –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å –ø–æ–º–æ—â—å—é aqtinstall."
            echo "cache-hit-local=false" >> $GITHUB_OUTPUT

            echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ aqtinstall..."
            python3 -m pip install aqtinstall

            echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ /opt/Qt –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤..."
            sudo mkdir -p /opt/Qt
            sudo chown $USER:$USER /opt/Qt

            echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt $QT_VERSION ($QT_ARCH_INSTALL) —Å –º–æ–¥—É–ª—è–º–∏: $QT_MODULES"
            INSTALL_CMD="aqt install-qt linux desktop $QT_VERSION $QT_ARCH_INSTALL -m $QT_MODULES -O /opt/Qt"
            echo "–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $INSTALL_CMD"
            if $INSTALL_CMD; then
              echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt $QT_VERSION —Å –º–æ–¥—É–ª—è–º–∏ '$QT_MODULES' –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ."
            else
              echo "::warning::–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt $QT_VERSION —Å –º–æ–¥—É–ª—è–º–∏ '$QT_MODULES' –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π Qt –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π..."
              FALLBACK_CMD="aqt install-qt linux desktop $QT_VERSION $QT_ARCH_INSTALL -O /opt/Qt"
              echo "–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç): $FALLBACK_CMD"
              if $FALLBACK_CMD; then
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ Qt $QT_VERSION –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ."
              else
                echo "::error::–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Qt $QT_VERSION –Ω–∏ —Å –º–æ–¥—É–ª—è–º–∏, –Ω–∏ –±–µ–∑ –Ω–∏—Ö."
                echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è Qt $QT_VERSION $QT_ARCH_INSTALL:"
                aqt list-qt linux desktop --modules $QT_VERSION $QT_ARCH_INSTALL || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π."
                exit 1
              fi
            fi
          fi

          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É/–Ω–∞–ª–∏—á–∏–µ Qt
          echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ/–∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Qt 6.8.0 ==="
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å QT_INSTALL_PATH, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ gcc_64
          if [ -d "$QT_INSTALL_PATH/lib" ] && [ -f "$QT_INSTALL_PATH/bin/qmake6" ]; then
            echo "–ö–∞—Ç–∞–ª–æ–≥ $QT_INSTALL_PATH/lib –Ω–∞–π–¥–µ–Ω –∏ qmake6 –¥–æ—Å—Ç—É–ø–µ–Ω."
            echo "–í–µ—Ä—Å–∏—è Qt (qmake6 -v):"
            $QT_INSTALL_PATH/bin/qmake6 -v || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é qmake6."
            echo "–ù–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:"
            ls -la $QT_INSTALL_PATH/lib/libQt6Core.so* 2>/dev/null || echo "  libQt6Core.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ls -la $QT_INSTALL_PATH/lib/libQt6Gui.so* 2>/dev/null || echo "  libQt6Gui.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ls -la $QT_INSTALL_PATH/lib/libQt6Widgets.so* 2>/dev/null || echo "  libQt6Widgets.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ls -la $QT_INSTALL_PATH/lib/libQt6Network.so* 2>/dev/null || echo "  libQt6Network.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ls -la $QT_INSTALL_PATH/lib/libQt6DBus.so* 2>/dev/null || echo "  libQt6DBus.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ls -la $QT_INSTALL_PATH/lib/libQt6Qml.so* 2>/dev/null || echo "  libQt6Qml.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ls -la $QT_INSTALL_PATH/lib/libQt6Quick.so* 2>/dev/null || echo "  libQt6Quick.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ls -la $QT_INSTALL_PATH/lib/libQt6Multimedia.so* 2>/dev/null || echo "  libQt6Multimedia.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ls -la $QT_INSTALL_PATH/lib/libQt6OpenGL.so* 2>/dev/null || echo "  libQt6OpenGL.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ls -la $QT_INSTALL_PATH/lib/libQt6Sql.so* 2>/dev/null || echo "  libQt6Sql.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ls -la $QT_INSTALL_PATH/lib/libQt6Concurrent.so* 2>/dev/null || echo "  libQt6Concurrent.so* –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            echo "–ù–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä):"
            if ls $QT_INSTALL_PATH/plugins/platforms/libqxcb.so >/dev/null 2>&1; then
              echo "  –ü–ª–∞–≥–∏–Ω XCB (libqxcb.so) –Ω–∞–π–¥–µ–Ω"
            else
              echo "  –ü–ª–∞–≥–∏–Ω XCB (libqxcb.so) –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            if ls $QT_INSTALL_PATH/plugins/sqldrivers/libqsqlite.so >/dev/null 2>&1; then
              echo "  –ü–ª–∞–≥–∏–Ω SQLite (libqsqlite.so) –Ω–∞–π–¥–µ–Ω"
            else
              echo "  –ü–ª–∞–≥–∏–Ω SQLite (libqsqlite.so) –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
          else
            echo "::error::–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ö–∞—Ç–∞–ª–æ–≥ $QT_INSTALL_PATH/lib –∏–ª–∏ qmake6 –ù–ï –ù–ê–ô–î–ï–ù."
            echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ /opt/Qt (–µ—Å–ª–∏ –µ—Å—Ç—å):"
            ls -la /opt/Qt/ 2>/dev/null || echo "  /opt/Qt –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ /opt/Qt/$QT_VERSION/ (–µ—Å–ª–∏ –µ—Å—Ç—å):"
            ls -la /opt/Qt/$QT_VERSION/ 2>/dev/null || echo "  /opt/Qt/$QT_VERSION/ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            exit 1
          fi
          echo "=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞/–ø—Ä–æ–≤–µ—Ä–∫–∞ Qt 6.8.0 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ==="

      - name: Save Qt 6.8.0 Cache
        if: steps.cache-qt.outputs.cache-hit != 'true' && steps.install-qt.outputs.cache-hit-local == 'false'
        uses: actions/cache/save@v3
        with:
          path: /opt/Qt
          key: qt-${{ runner.os }}-6.8.0-gcc_64-${{ hashFiles('**/build.yml') }}
      # -----------------------         



      # -----------------------
      # –ö—ç—à–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É TagLib –∏–∑ Git
      - name: Cache TagLib Git Build
        id: cache-taglib
        uses: actions/cache@v3
        with:
          path: ~/taglib_build
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á, –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
          key: taglib-git-tip-${{ runner.os }}

      # -----------------------
      # –°–±–æ—Ä–∫–∞ TagLib –∏–∑ Git, –µ—Å–ª–∏ –∫–µ—à –ø—É—Å—Ç–æ–π
      - name: Build TagLib from Git
        if: steps.cache-taglib.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–±–æ—Ä–∫–∏ TagLib
          # cmake –∏ g++ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
          sudo apt-get install -y build-essential cmake git

          mkdir -p ~/taglib_build_source && cd ~/taglib_build_source
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π TagLib
          git clone https://github.com/taglib/taglib.git
          cd taglib
          git submodule update --init
          # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å git checkout <–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π_—Å—Ç–∞–±–∏–ª—å–Ω—ã–π_—Ç–µ–≥>, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          # –ù–∞–ø—Ä–∏–º–µ—Ä: git checkout v2.0  (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–≥ –Ω–∞ GitHub)
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏
          mkdir build && cd build
          # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É —Å –ø–æ–º–æ—â—å—é CMake
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ ~/taglib_build
          # -DCMAKE_BUILD_TYPE=Release –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏
          # -DBUILD_SHARED_LIBS=ON —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å shared libraries (.so)
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HOME/taglib_build -DBUILD_SHARED_LIBS=ON
          # –°–æ–±–∏—Ä–∞–µ–º
          make -j$(nproc)
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ ~/taglib_build
          make install

      # -----------------------
      # –ö–æ–ø–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ TagLib –≤ AppDir
      - name: Copy TagLib libs to AppDir
        run: |
          echo "=== –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫ TagLib –∏–∑ Git-—Å–±–æ—Ä–∫–∏ ==="
          if [ -d "$HOME/taglib_build/lib" ]; then
            echo "–ù–∞–π–¥–µ–Ω –∫–∞—Ç–∞–ª–æ–≥ –±–∏–±–ª–∏–æ—Ç–µ–∫: $HOME/taglib_build/lib"
            mkdir -p AppDir/usr/lib
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ .so —Ñ–∞–π–ª—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ lib
            cp -v $HOME/taglib_build/lib/*.so* AppDir/usr/lib/
            
            echo "–§–∞–π–ª—ã TagLib –≤ AppDir/usr/lib/ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:"
            ls -la AppDir/usr/lib/libtag* 2>/dev/null || echo "–§–∞–π–ª—ã libtag* –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ AppDir/usr/lib/"
          else
            echo "::warning::–ö–∞—Ç–∞–ª–æ–≥ $HOME/taglib_build/lib –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ."
            echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏..."
            find $HOME/taglib_build -name "libtag*" 2>/dev/null || echo "–§–∞–π–ª—ã libtag* –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $HOME/taglib_build"
          fi
      # -----------------------
      
      # -----------------------
      # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—É—é —Å–±–æ—Ä–∫—É ICU 76.1 –¥–ª—è Ubuntu 22.04
      - name: Download and Extract ICU 76.1 (Ubuntu 22.04)
        run: |
          echo "=== –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ICU 76.1 (Ubuntu 22.04) ==="
          wget https://github.com/unicode-org/icu/releases/download/release-76-1/icu4c-76_1-Ubuntu22.04-x64.tgz
          echo "=== –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ICU 76.1 ==="
          tar xzf icu4c-76_1-Ubuntu22.04-x64.tgz
          echo "=== –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫ ICU 76.1 –≤ AppDir ==="
          mkdir -p AppDir/usr/lib
          # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–µ lib –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
          echo
          ls -la
          echo
          ls -la ./icu/usr/local/lib/
          echo
          cp ./icu/usr/local/lib/*.* AppDir/usr/lib/
          # –ö–æ–ø–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ —Å–∏–º–≤–æ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ .so –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –∞—Ä—Ö–∏–≤–µ
          # cp icu4c-76_1-Ubuntu22.04-x64/lib/libicui18n.so AppDir/usr/lib/ 2>/dev/null || echo "libicui18n.so (symlink) not found"
          # cp icu4c-76_1-Ubuntu22.04-x64/lib/libicuuc.so AppDir/usr/lib/ 2>/dev/null || echo "libicuuc.so (symlink) not found"
          # cp icu4c-76_1-Ubuntu22.04-x64/lib/libicudata.so AppDir/usr/lib/ 2>/dev/null || echo "libicudata.so (symlink) not found"
    
          echo "–§–∞–π–ª—ã ICU 76 –≤ AppDir/usr/lib/ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:"
          ls -la AppDir/usr/lib/libicu* 2>/dev/null || echo "–§–∞–π–ª—ã libicu* –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ AppDir/usr/lib/"
    
          # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -rf icu4c-76_1-Ubuntu22.04-x64*
      # -----------------------

      # -----------------------
      # 1. –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ FFmpeg –≤–µ—Ä—Å–∏–∏ 7.x.x
      - name: Get Latest FFmpeg 7.x Tag
        id: ffmpeg-tag
        run: |
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π FFmpeg –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          cd /tmp
          git clone --bare --filter=blob:none --quiet https://git.ffmpeg.org/ffmpeg.git ffmpeg_temp
          cd ffmpeg_temp
          
          # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
          # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–≥–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 'n7.' (–Ω–∞–ø—Ä–∏–º–µ—Ä, n7.0, n7.1)
          # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Å–∏–∏ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
          LATEST_TAG=$(git tag -l "n7.*" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "::error::–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–≥ FFmpeg –≤–µ—Ä—Å–∏–∏ 7.x.x"
            exit 1
          fi
          
          # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –∫–æ–º–º–∏—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–≥–∞
          TAG_HASH=$(git rev-parse "$LATEST_TAG")
          
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "hash=$TAG_HASH" >> $GITHUB_OUTPUT
          echo "–ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ FFmpeg 7.x.x: $LATEST_TAG ($TAG_HASH)"

      # -----------------------
      # 2. –ö–µ—à–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É FFmpeg –∏–∑ Git
      - name: Cache FFmpeg Git Build
        id: cache-ffmpeg
        uses: actions/cache@v3
        with:
          path: ~/ffmpeg_build
          # –ö—ç—à –±—É–¥–µ—Ç –ø—Ä–æ–º–∞—Ö–∏–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Ö—ç—à –∫–æ–º–º–∏—Ç–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è
          key: ffmpeg-git-${{ steps.ffmpeg-tag.outputs.hash }}-${{ runner.os }}

      # -----------------------
      # 3. –°–±–æ—Ä–∫–∞ FFmpeg –∏–∑ Git, –µ—Å–ª–∏ –∫–µ—à –ø—É—Å—Ç–æ–π
      - name: Build FFmpeg from Git
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake build-essential cmake git libtool \
          pkg-config texinfo yasm nasm zlib1g-dev libx264-dev libx265-dev \
          libvpx-dev libfdk-aac-dev libmp3lame-dev libopus-dev wget

          mkdir -p ~/ffmpeg_build_source && cd ~/ffmpeg_build_source
          git clone https://git.ffmpeg.org/ffmpeg.git
          cd ffmpeg
          
          # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ç–µ–≥—É
          git checkout tags/${{ steps.ffmpeg-tag.outputs.tag }} -b build-branch
          
          # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ shared libraries (.so.x)
          # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω—ã
          # –û—Ç–∫–ª—é—á–∞–µ–º yasm/asm, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)
          ./configure --prefix=$HOME/ffmpeg_build --disable-programs --disable-doc --enable-shared --disable-static --disable-yasm --disable-asm
          make -j$(nproc)
          make install

      # -----------------------
      # 4. –ö–æ–ø–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ AppDir –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
      - name: Copy FFmpeg libs to AppDir and verify
        run: |
          echo "=== –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫ FFmpeg –∏–∑ Git-—Å–±–æ—Ä–∫–∏ ==="
          echo "–ò—â–µ–º —Ñ–∞–π–ª—ã –≤ $HOME/ffmpeg_build/lib/:"
          ls -la $HOME/ffmpeg_build/lib/libavcodec.so* $HOME/ffmpeg_build/lib/libavformat.so* 2>/dev/null || echo "–§–∞–π–ª—ã .so* –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–±–æ—Ä–∫–µ"
          
          mkdir -p AppDir/usr/lib
          cp $HOME/ffmpeg_build/lib/libavcodec.so* AppDir/usr/lib/
          cp $HOME/ffmpeg_build/lib/libavformat.so* AppDir/usr/lib/
          cp $HOME/ffmpeg_build/lib/*.so* AppDir/usr/lib/
          # cp -r $HOME/ffmpeg_build/include AppDir/usr/ # –û–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è AppImage
          
          echo "–§–∞–π–ª—ã –≤ AppDir/usr/lib/ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:"
          ls -la AppDir/usr/lib/libavcodec.so* AppDir/usr/lib/libavformat.so* 2>/dev/null || echo "–§–∞–π–ª—ã .so* –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ AppDir"

      # -----------------------
      # 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LD_LIBRARY_PATH –≤ AppRun
      - name: Set library path
        run: |
          echo 'export LD_LIBRARY_PATH=$APPDIR/usr/lib:$LD_LIBRARY_PATH' >> AppDir/AppRun

      - name: –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
        run: |
          copy_deps() {
            local binary="$1"
            if [ ! -f "$binary" ]; then
              echo "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $binary"
              exit 1
            fi
            echo "üîç –ü–æ–∏—Å–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è: $binary"
            ldd "$binary" | awk '/=>/ { print $3 }' | while read lib; do
              if [ -n "$lib" ] && [ -f "$lib" ]; then
                mkdir -p "AppDir$(dirname "$lib")"
                cp "$lib" "AppDir$lib"
                echo "   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: $lib"
              fi
            done
          }
          copy_deps "AppDir/usr/bin/fooyin"

      - name: –î–æ–±–∞–≤–∏—Ç—å libstdc++ –≤ AppDir
        run: |
          echo "üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ libstdc++ –≤ AppDir..."
          LIBSTDCPP=$(g++ -print-file-name=libstdc++.so.6)
          if [ -f "$LIBSTDCPP" ]; then
            cp "$LIBSTDCPP" AppDir/usr/lib/
            echo "‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $LIBSTDCPP"
          else
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ libstdc++"
            exit 1
          fi


      - name: –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç AppRun
        run: |
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export LD_LIBRARY_PATH="${HERE}/usr/lib/x86_64-linux-gnu:${HERE}/usr/lib:${HERE}/usr/lib/x86_64-linux-gnu/libproxy:${HERE}/lib/x86_64-linux-gnu:${HERE}/lib:${LD_LIBRARY_PATH}"
          export QT_PLUGIN_PATH="${HERE}/usr/lib/x86_64-linux-gnu/qt6/plugins"
          export QML2_IMPORT_PATH="${HERE}/usr/lib/x86_64-linux-gnu/qt6/qml"
          export PATH="${HERE}/usr/bin:${PATH}"
          exec "${HERE}/usr/bin/fooyin" "$@"
          EOF
          chmod +x AppDir/AppRun

      - name: –°–æ–∑–¥–∞—Ç—å .desktop —Ñ–∞–π–ª
        run: |
          cat > AppDir/fooyin.desktop << 'EOF'
          [Desktop Entry]
          Name=Fooyin
          Comment=–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å –º—É–∑—ã–∫–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ
          Exec=fooyin
          Icon=fooyin
          Terminal=false
          Type=Application
          Categories=AudioVideo;Audio;
          MimeType=audio/mpeg;audio/x-flac;audio/wav;audio/x-wav;audio/ogg;audio/x-ogg;audio/aac;audio/x-m4a;audio/flac;audio/mp4;
          EOF

      - name: –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É
        run: |
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          ICON_FILE=$(find AppDir/usr/share/icons -name "*fooyin*" -o -name "*Fooyin*" -type f | head -1)
          if [ -n "$ICON_FILE" ]; then
            cp "$ICON_FILE" AppDir/usr/share/icons/hicolor/256x256/apps/fooyin.png
            cp "$ICON_FILE" AppDir/fooyin.png
            echo "‚úÖ –ò–∫–æ–Ω–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: $ICON_FILE"
          else
            echo "‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–∫–µ—Ç–µ. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å fallback..."
            wget -O AppDir/fooyin.png https://raw.githubusercontent.com/fooyin/fooyin/master/resources/fooyin-icon.png 2>/dev/null && echo "‚úÖ Fallback –∏–∫–æ–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞" || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É"
          fi

      - name: –°–æ–±—Ä–∞—Ç—å AppImage
        run: |
          ./appimagetool-x86_64.AppImage AppDir Fooyin-${{ env.LATEST_TAG }}-x86_64.AppImage

      - name: –ó–∞–≥—Ä—É–∑–∏—Ç—å AppImage –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        uses: actions/upload-artifact@v4
        with:
          name: Fooyin-AppImage
          path: Fooyin-*.AppImage

      - name: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        id: get-date
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: –°–æ–∑–¥–∞—Ç—å GitHub Release (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–µ–≥–∞—Ö)
        #if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: Fooyin-*.AppImage
          tag_name: ${{ env.LATEST_TAG }}
          name: Fooyin ${{ env.LATEST_TAG }}
          body: |
            Fooyin AppImage —Å–æ–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ .deb –ø–∞–∫–µ—Ç–∞.

            **–í–µ—Ä—Å–∏—è:** ${{ env.LATEST_TAG }}
            **–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:** ${{ env.BUILD_DATE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
