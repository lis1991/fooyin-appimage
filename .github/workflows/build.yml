name: Build Fooyin AppImage on Release

on:
  repository_dispatch:
    types: [fooyin-release]
  workflow_dispatch:
    inputs:
      fooyin-tag:
        description: 'Fooyin Git tag (e.g., v0.9.1)'
        required: true
        default: 'v0.9.1'

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      QT_VERSION: "6.8.0"
      FFMPEG_VERSION: "7.0.2"
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/AppDir/usr/local
      FOYIN_SOURCE_DIR: ${{ github.workspace }}/fooyin

    steps:
      - name: Checkout this repo (for recipe.yml)
        uses: actions/checkout@v4

      - name: Determine Fooyin tag
        id: determine-tag
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            TAG="${{ github.event.client_payload.release.tag_name }}"
            echo "Using tag from repository_dispatch: $TAG"
          else
            TAG="${{ github.event.inputs.fooyin-tag }}"
            echo "Using tag from workflow_dispatch: $TAG"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Checkout Fooyin source
        uses: actions/checkout@v4
        with:
          repository: fooyin/fooyin
          ref: ${{ env.TAG }}
          path: ${{ env.FOYIN_SOURCE_DIR }}

      - name: Setup CI Environment
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          mkdir -p ${{ env.INSTALL_PREFIX }}

      - name: Cache Qt and FFmpeg build
        uses: actions/cache@v4
        id: build-cache
        with:
          path: |
            ${{ env.INSTALL_PREFIX }}
            ${{ env.BUILD_DIR }}/qt-everywhere-src-${{ env.QT_VERSION }}
            ${{ env.BUILD_DIR }}/ffmpeg-${{ env.FFMPEG_VERSION }}
          key: ${{ runner.os }}-qt-${{ env.QT_VERSION }}-ffmpeg-${{ env.FFMPEG_VERSION }}-${{ hashFiles('**/recipe.yml') }}
          restore-keys: |
            ${{ runner.os }}-qt-${{ env.QT_VERSION }}-ffmpeg-${{ env.FFMPEG_VERSION }}-

      - name: Set up Python
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install appimage-builder
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          pip install appimage-builder

      - name: Install system dependencies
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake git pkg-config wget ninja-build \
            libgl1-mesa-dev libxcb1-dev libx11-dev libx11-xcb-dev \
            libxext-dev libxfixes-dev libxi-dev libxrender-dev \
            libxrandr-dev libxcursor-dev libxinerama-dev libxss-dev \
            libglib2.0-dev libicu-dev libzstd-dev libbz2-dev liblzma-dev \
            libva-dev libvdpau-dev libvorbis-dev libopus-dev \
            libmp3lame-dev libfdk-aac-dev yasm nasm

      - name: Build and install FFmpeg
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.BUILD_DIR }}
          wget -q https://ffmpeg.org/releases/ffmpeg-${{ env.FFMPEG_VERSION }}.tar.xz
          tar xf ffmpeg-${{ env.FFMPEG_VERSION }}.tar.xz
          cd ffmpeg-${{ env.FFMPEG_VERSION }}
          ./configure \
            --prefix=${{ env.INSTALL_PREFIX }} \
            --enable-shared \
            --disable-static \
            --disable-doc \
            --enable-pic
          make -j$(nproc)
          make install

      - name: Build and install Qt
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.BUILD_DIR }}
          wget -q https://download.qt.io/archive/qt/6.8/$QT_VERSION/single/qt-everywhere-src-$QT_VERSION.tar.xz
          tar xf qt-everywhere-src-$QT_VERSION.tar.xz
          cd qt-everywhere-src-$QT_VERSION
          ./configure -prefix $INSTALL_PREFIX \
            -opensource -confirm-license \
            -nomake examples -nomake tests \
            -skip qtwebengine \
            -system-zlib -system-libpng -system-libjpeg \
            -no-rpath \
            -shared \
            -I $INSTALL_PREFIX/include \
            -L $INSTALL_PREFIX/lib \
            -- \
            -DFEATURE_ffmpeg=ON \
            -DFFMPEG_ROOT=$INSTALL_PREFIX \
            -GNinja
          ninja
          ninja install

      - name: Build Fooyin
        run: |
          cd ${{ env.FOYIN_SOURCE_DIR }}
          mkdir -p build && cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }} \
            -DCMAKE_PREFIX_PATH=${{ env.INSTALL_PREFIX }} \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build . --parallel --target install

      - name: Prepare AppDir (Desktop file and icon)
        run: |
          mkdir -p ${{ env.INSTALL_PREFIX }}/share/applications
          cat > ${{ env.INSTALL_PREFIX }}/share/applications/fooyin.desktop <<EOF
[Desktop Entry]
Name=Fooyin
Exec=fooyin %F
Type=Application
Icon=fooyin
Categories=AudioVideo;Player;
Comment=A customisable music player
MimeType=application/x-ogg;audio/aac;audio/mp4;audio/mpeg;audio/ogg;audio/x-flac;audio/x-m4a;audio/x-mp3;audio/x-mpeg;audio/x-ms-wma;audio/x-vorbis;audio/x-vorbis+ogg;audio/x-wav;
EOF
          ICON_SRC_PATH="${{ env.FOYIN_SOURCE_DIR }}/data/icons/fooyin.png"
          if [ -f "$ICON_SRC_PATH" ]; then
            mkdir -p ${{ env.INSTALL_PREFIX }}/share/icons/hicolor/256x256/apps
            cp "$ICON_SRC_PATH" ${{ env.INSTALL_PREFIX }}/share/icons/hicolor/256x256/apps/fooyin.png
          else
            echo "WARNING: Icon not found at $ICON_SRC_PATH. AppImage will lack an icon."
          fi

      - name: Clean version from tag
        id: clean-version
        run: |
          CLEAN_VERSION=${TAG#v}
          echo "VERSION=$CLEAN_VERSION" >> $GITHUB_ENV
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

      - name: Build AppImage
        run: |
          export VERSION=${{ env.VERSION }}
          appimage-builder --recipe recipe.yml --skip-test

      - name: Upload AppImage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Fooyin-AppImage-${{ env.VERSION }}
          path: Fooyin-*.AppImage

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}-appimage
          name: "Fooyin ${{ env.TAG }} (AppImage)"
          body: |
            Automatic AppImage build for Fooyin ${{ env.TAG }}

            **Includes:**
            - Qt ${{ env.QT_VERSION }}
            - FFmpeg ${{ env.FFMPEG_VERSION }}

            Built from: https://github.com/fooyin/fooyin/releases/tag/${{ env.TAG }}
          files: Fooyin-*.AppImage
          prerelease: false
