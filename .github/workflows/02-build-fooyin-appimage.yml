# .github/workflows/02-build-fooyin-appimage.yml
name: 02. Build Fooyin AppImage

on:
  workflow_dispatch:
    inputs:
      fooyin_ref:
        description: 'Fooyin Git ref (tag/branch/commit, e.g., v0.9.1 or master)'
        required: true
        default: 'master'
  workflow_call:
    inputs:
      fooyin_ref:
        description: 'Fooyin Git ref (tag/branch/commit, e.g., v0.9.1 or master)'
        type: string
        required: true
  push:
    branches:
      - main # Или ваша основная ветка
  pull_request:
    branches:
      - main

# Определяем версии как переменные верхнего уровня для использования в env
env:
  # Версии (должны совпадать с 01-prepare-and-cache-env.yml)
  QT_VERSION: "6.8.0"
  FFMPEG_VERSION: "7.1.2"
  # Директории
  INSTALL_PREFIX: ${{ github.workspace }}/AppDir/usr/local
  FOYIN_SOURCE_DIR: ${{ github.workspace }}/fooyin
  # Ключ кэша (должен совпадать с 01-prepare-and-cache-env.yml)
  CACHE_KEY: "build-env-qt6.8.0-ffmpeg7.1.2-v3"

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout this repo (for recipe.yml)
        uses: actions/checkout@v4

      - name: Determine Fooyin ref
        id: determine-ref
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            REF="${{ github.event.inputs.fooyin_ref }}"
          elif [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            REF="${{ github.event.inputs.fooyin_ref }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            REF="${{ github.event.pull_request.head.sha }}"
          else # push
            REF="${{ github.sha }}"
          fi
          echo "REF=$REF" >> $GITHUB_ENV
          echo "ref=$REF" >> $GITHUB_OUTPUT

      - name: Checkout Fooyin source
        uses: actions/checkout@v4
        with:
          repository: fooyin/fooyin
          ref: ${{ env.REF }}
          path: ${{ env.FOYIN_SOURCE_DIR }}

      - name: Setup AppDir structure
        run: mkdir -p ${{ env.INSTALL_PREFIX }}

      # --- ВОССТАНОВЛЕНИЕ КЭША СРЕДЫ ---
      - name: Restore cached build environment
        uses: actions/cache/restore@v4
        id: restore-env
        with:
          path: ${{ env.INSTALL_PREFIX }}
          key: ${{ env.CACHE_KEY }}
          fail-on-cache-miss: true # Критично: если кэш не найден, останавливаемся

      - name: Verify restored environment
        run: |
          if [ -f "${{ env.INSTALL_PREFIX }}/bin/qmake" ]; then
            echo "Qt qmake found."
            ${{ env.INSTALL_PREFIX }}/bin/qmake -v
          else
            echo "Warning: qmake not found in cache."
          fi
          if [ -f "${{ env.INSTALL_PREFIX }}/lib/libavcodec.so" ]; then
            echo "FFmpeg libraries found."
          else
            echo "Warning: FFmpeg libraries not found in cache."
          fi

      - name: Set up Python and appimage-builder
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: pip install appimage-builder

      # --- СБОРКА FOOYIN ---
      - name: Build Fooyin
        run: |
          cd ${{ env.FOYIN_SOURCE_DIR }}
          mkdir -p build && cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }} \
            -DCMAKE_PREFIX_PATH=${{ env.INSTALL_PREFIX }} \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build . --parallel
          cmake --build . --parallel --target install

      # --- ПОДГОТОВКА AppDir (Desktop файл и иконка) ---
      - name: Prepare AppDir (Desktop file and icon)
        run: |
          mkdir -p ${{ env.INSTALL_PREFIX }}/share/applications
          # Создаем .desktop файл с помощью printf
          printf "[Desktop Entry]\nVersion=1.0\nType=Application\nName=Fooyin\nComment=A customisable music player\nExec=fooyin %%F\nIcon=fooyin\nTerminal=false\nCategories=AudioVideo;Player;\nMimeType=application/x-ogg;audio/aac;audio/mp4;audio/mpeg;audio/ogg;audio/x-flac;audio/x-m4a;audio/x-mp3;audio/x-mpeg;audio/x-ms-wma;audio/x-vorbis;audio/x-vorbis+ogg;audio/x-wav;\nStartupNotify=true\n" > "${{ env.INSTALL_PREFIX }}/share/applications/fooyin.desktop"
          
          # Путь к исходной иконке в репозитории Fooyin
          ICON_SRC_PATH="${{ env.FOYIN_SOURCE_DIR }}/data/icons/fooyin.png"
          # Создаем директорию для иконки в AppDir
          mkdir -p ${{ env.INSTALL_PREFIX }}/share/icons/hicolor/256x256/apps
          # Проверяем, существует ли иконка в исходниках Fooyin
          if [ -f "$ICON_SRC_PATH" ]; then
            # Если существует, копируем её в AppDir
            cp "$ICON_SRC_PATH" ${{ env.INSTALL_PREFIX }}/share/icons/hicolor/256x256/apps/fooyin.png
            echo "Icon copied from $ICON_SRC_PATH"
          else
            # Если не существует, выводим предупреждение и создаем пустой файл
            # чтобы избежать ошибок appimage-builder
            echo "WARNING: Icon not found at $ICON_SRC_PATH. Creating a placeholder."
            touch ${{ env.INSTALL_PREFIX }}/share/icons/hicolor/256x256/apps/fooyin.png
          fi

      - name: Determine Version
        id: get-version
        run: |
          cd ${{ env.FOYIN_SOURCE_DIR }}
          # Пытаемся получить тег или используем короткий SHA
          VERSION=$(git describe --tags --exact-match 2>/dev/null || echo "${{ env.REF }}" | cut -c1-8)
          VERSION=${VERSION#v} # Убираем 'v' в начале, если есть
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build AppImage
        run: |
          export VERSION=${{ env.VERSION }}
          # Предполагается, что recipe.yml находится в корне репозитория,
          # из которого запускается этот workflow.
          appimage-builder --recipe recipe.yml --skip-test

      - name: Upload AppImage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Fooyin-AppImage-${{ env.VERSION }}
          path: Fooyin-*.AppImage*

      # --- СОЗДАНИЕ РЕЛИЗА НА GITHUB ---
      - name: Create GitHub Release
        # Создаем релиз только при запуске вручную или через workflow_call (например, из 03-watch-fooyin-releases.yml)
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' }}
        uses: softprops/action-gh-release@v1
        with:
          # Используем оригинальный тег из Fooyin, если это был тег, иначе используем нашу версию
          tag_name: ${{ startsWith(github.event.inputs.fooyin_ref, 'v') && github.event.inputs.fooyin_ref || format('{0}-appimage', env.VERSION) }}
          name: "Fooyin ${{ env.VERSION }} (AppImage)"
          body: |
            Automatic AppImage build for Fooyin ${{ env.VERSION }}

            **Includes:**
            - Qt ${{ env.QT_VERSION }} (Prebuilt)
            - FFmpeg ${{ env.FFMPEG_VERSION }}

            Built from: https://github.com/fooyin/fooyin/commit/${{ env.REF }}
          files: |
            Fooyin-*.AppImage
            Fooyin-*.AppImage.zsync
          prerelease: ${{ !startsWith(github.event.inputs.fooyin_ref, 'v') || contains(github.event.inputs.fooyin_ref, '-') }}
          # fail_on_unmatched_files: true # Опционально, для строгой проверки
